/*p>The standard socket library in C comes with a lot of functions for every task like connecting, sending data and receiving data etc. However knowing the syntax of all the functions and calling them again and again and in the right sequence could be a bit intimidating. </p>
<p>Using a class can help in such a situation. It has fewer functions and a simpler syntax. The class however does call the actual socket functions from the library.</p>
<p>In this article we would try to code a wrapper class for "client" functionality. A socket client connects to a certain server on a certain port number and then sends some data and then waits for a reply. And it keeps doing this for as long as the application wishes to. Common examples of such clients are web browser and ftp clients. Web browsers connect to websites on port 80 and fetch the html content of the webpage and then render them on the screen for the user.</p>
<p>Before moving on, it is suggested that you get your concepts clear on the basic socket operations. This <a href="https://www.binarytides.com/beginners-guide-to-socket-programming-in-c-on-linux/">socket programming tutorial</a> can help.</p>
<h3>Code</h3>
<p>Now here we have coded a simple class called sockClient, which can be used to perform basic clientside socket operations like sending and receiving data from a tcp server on a certain port number.</p>
<p>The following code works only on linux.</p>
<pre class="brush: cpp; title: ; notranslate" title="">/**
	C++ client example using sockets
*/
#include <iostream>	//cout
#include <stdio.h>	//printf
#include <string.h> //strlen
#include <string>	//string
#include <sys/socket.h>	//socket
#include <arpa/inet.h>	//inet_addr
#include <netdb.h>	//hostent
#include "sockClient.h"

using namespace std;




sockClient::sockClient()
{
	sock = -1;
	port = 0;
	address = "";
}


/*
/**
	Connect to a host on a certain port number

bool sockClient::conn(string address , int port)
{
	//create socket if it is not already created
	if(sock == -1)
	{
		//Create socket
		sock = socket(AF_INET , SOCK_STREAM , 0);
		if (sock == -1)
		{
			const char e[] = "Could not create socket";
			cerr << (e);
		}

		cout<<"Socket created\n";
	}
	else	{	}

	//setup address structure
	if(inet_addr(address.c_str()) == -1)
	{
		struct hostent *he;
		struct in_addr **addr_list;

		//resolve the hostname, its not an ip address
		if ( (he = gethostbyname( address.c_str() ) ) == NULL)
		{
			//gethostbyname failed
			herror("gethostbyname");
			cout<<"Failed to resolve hostname\n";

			return false;
		}

		//Cast the h_addr_list to in_addr , since h_addr_list also has the ip address in long format only
		addr_list = (struct in_addr **) he->>h_addr_list;

		for(int i = 0; addr_list[i] != NULL; i++)
		{
			//strcpy(ip , inet_ntoa(*addr_list[i]) );
			server.sin_addr = *addr_list[i];

			cout<<address<<" resolved to "<<inet_ntoa(*addr_list[i])<<endl;

			break;
		}
	}

	//plain ip address
	else
	{
		server.sin_addr.s_addr = inet_addr( address.c_str() );
	}

	server.sin_family = AF_INET;
	server.sin_port = htons( port );

	//Connect to remote server
	if (connect(sock , (struct sockaddr *)&amp;server , sizeof(server)) < 0)
	{
		perror("connect failed. Error");
		return 1;
	}

	cout<<"Connected\n";
	return true;
}

/**
	Send data to the connected host
bool sockClient::send_data(string data)
{
	//Send some data
	if( send(sock , data.c_str() , strlen( data.c_str() ) , 0) < 0)
	{
		perror("Send failed : ");
		return false;
	}
	cout<<"Data send\n";

	return true;
}

/**
	Receive data from the connected host

string sockClient::receive(int size=512)
{
	char buffer[size];
	string reply;

	//Receive a reply from the server
	if( recv(sock , buffer , sizeof(buffer) , 0) < 0)
	{
		puts("recv failed");
	}

	reply = buffer;
	return reply;
}

int main(int argc , char *argv[])
{
	sockClient c;
	string host;

	cout<<"Enter hostname : ";
	cin>>host;

	//connect to host
	c.conn(host , 80);

	//send some data
	c.send_data("GET / HTTP/1.1\r\n\r\n");

	//receive and echo reply
	cout<<"----------------------------\n\n";
	cout<<c.receive(1024);
	cout<<"\n\n----------------------------\n\n";

	//done
	return 0;
}
