/*
 * sockClient.cpp
 *
 *  Created on: Nov 17, 2018
 *      Author: programmer
 */

#include <iostream>	//cout
#include <stdio.h>	//printf
#include <string.h> //strlen
#include <string>	//string
#include <sys/socket.h>	//socket
#include <arpa/inet.h>	//inet_addr
#include <netdb.h>	//hostent
#include "sockClient.h"

using namespace std;

/*todo:
 * create object X
 * Create socket X
 * create hint for server we re connectin
 * connect to socket
 * read
 * write
 * close/destroy
 */

//create object
sockClient::sockClient()
{
	sock = -1; //default -1 to indicate it hasnt been started yet
	port = 0; //variable to store port number
	address = ""; //variable to store address

	//server;
}

sockClient::sockClient(string addr, int prt)
{
	sock = -1; //default -1 to indicate it hasnt been started yet
	port = prt; //variable to store port number
	address = addr; //variable to store address
	//server;
}

//create socket
int sockClient::createSock(sockClient sc)
{
	if (sc.sock == -1) //Socket not yet created or failed to create on last try.
	{
		sc.sock = socket(AF_INET, SOCK_STREAM, 0); //create socket(ipv4, tcp, protocol auto)
	}
	if (sc.sock == -1) //Failed to create socket
	{
		cerr << "Failed to create socket" << endl;
		return 1;
	}
	return 0;
}

//create hint structure for the server we want to connect with./////////
void sockClient::setHint(sockClient sc)
{
	sc.server.sin_family = AF_INET; //ipv4
	sc.server.sin_port = htons(sc.port); //string to network short (small endian?)
	inet_pton(AF_INET, sc.address.c_str(), &sc.server.sin_addr); //convert to sin addr
}


bool sockClient::connectToServer(sockClient sc)
{
	//connect to hint

	sc.connection = connect(sc.sock, (sockaddr*)&sc.server, sizeof(sc.server));
	if (sc.connection == -1)
	{
		cerr << " unable to connect" <<endl;
		return false;
	}
	return true;
}

bool sockClient::sendToServer(string data) //send
{
	return false;
}

string sockClient::receiveFromServer(sockClient sc) //receive
{
	return "abc";
}

